lambda function : 
------------------------
this is a nameless, with out return type and without modifiers function

examples : 

public void print()
	{
		System.out.println("hello this is lambda");
	} 

lambda function : 
  
  ()->{System.out.println("hello this is lambda");}
  
* If lambda function body contains only one line, then curly braces "{..}" are not 
mandatory,

so , lambda function : 

()->System.out.println("hello this is lambda");

Example 2 : 

normal method : 

public void print(int a, int b)
	{
		System.out.println(a+b);
	}
	
lambda function : 
(int a, int b)-> System.out.println(a+b);



* compiler has capability to assume the type of theLambda function arguments,
so no need to mention the types

so the lambda function will be : 

(a,b)-> System.out.println(a+b);


Example 3 : 

normal method : 

public int findSquare(int n)
	{
		return n*n ;
	}

Lambda function : 
if returnning something , then curly braces should be present irrespective of having
only one line also.

i.e

(n)-> { return n*n; }
   or
(n)->n*n;   ---------> this also returns the value;

again if only one argument is there, no need to mention inside the parenthesis "()"

i.e

n->n*n;   ---------> this also returns the value;


Example 4 : 
normal method :

public int findLength(String s)
	{
		return s.length() ;
	}
	
Lambda function :

s->s.length;


--------------------------------
Functional Interface
----------------------------------
the Interface contains exactly only one abstract method

i.e

Interface Interf
{
   public void m1();
}

* @FunctionalInterface is an annotation used to warn compiler for declaring a 
Functional Interface

i.e

@FunctionalInterface
Interface Interf
{
   public void m1();
   public void m2();      // gives compile time error, though it contains 2 
                          // abstract methods, so it is just a normal interface
}


--------------------------------------------------------------
Lambda function example with Functional Interface
--------------------------------------------------------------

Example 1 : this example demonstrates normal flow of an interface and an
implementation class and how to call the overridden method present in the interface

// this is a functional interface containing only one abstract method
**************************************************************************
@FunctionalInterface
public interface Interface1
{
   public void print1();
}

//this is an implementation class that provides implementation for above interface
************************************************************************************
public class Interface1Impl implements Interface1
{ 
  //normal method implementation
  
  @Override public void print1()
  { System.out.println("Hello world");
  
  }
  
}

// this is a client class or dummy class 

public class Client
{
	public static void main(String[] args)
	{
	   Interface1 i = new Interface1Impl();
	   i.print1();
	}
}

** If we convert the above program using lambda, then the total implementation class
itself is not needed, complete example is present in 
package  : /Utilities/src/com/java8/example/functionalInterface

converting above example using lambda : 

interface : 

@FunctionalInterface
public interface Interface1
{
   public void print1();
}

client class :

public class Client
{

	public static void main(String[] args)
	{
		  Interface1 i = ()->System.out.println("Hello world by lambda");
		  i.print1();
	}

}

# Comparator example in lambda expression : 
-----------------------------------------------------

package com.java8.example.int_comparator.example2;

public class Book
{
    private int book_id;
    private String book_name;
    private int book_page;
    
    public Book() {
		// TODO Auto-generated constructor stub
	}

	public Book(int book_id, String book_name, int book_page) {
		super();
		this.book_id = book_id;
		this.book_name = book_name;
		this.book_page = book_page;
	}

	public int getBook_id() {
		return book_id;
	}

	public void setBook_id(int book_id) {
		this.book_id = book_id;
	}

	public String getBook_name() {
		return book_name;
	}

	public void setBook_name(String book_name) {
		this.book_name = book_name;
	}

	public int getBook_page() {
		return book_page;
	}

	public void setBook_page(int book_page) {
		this.book_page = book_page;
	}
    
	@Override
	public String toString()
	{
		return book_id+"--"+book_name+"--"+book_page+"\n";
	}
}


--------------------------------------------------------
Book Client class
----------------------------------------------------------
package com.java8.example.int_comparator.example2;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class BookClinet
{
	public static void main(String[] args)
	{
        List<Book> li = new ArrayList<Book>();
        li.add(new Book(101,"java",1000));
        li.add(new Book(108,"RESTful web service",356));
        li.add(new Book(115,"Data science",4478));
        li.add(new Book(107,"Spring boot",1000));
        li.add(new Book(114,"Spring",655));
        li.add(new Book(103,"Hibernate",265));
        System.out.println("before sorting : "+li);
        //method 1 : 
		/*
		 * Comparator<Book> bc = (b1,b2)-> { return
		 * (b1.getBook_id()<b2.getBook_id())?-1: (b1.getBook_id()>b2.getBook_id()?1:0);
		 * };
		 * 
		 * Collections.sort(li,bc);
		 */
        //or else inplace of the comparator object, we can write whole implementation
        Collections.sort(li,(b1,b2)->(b1.getBook_id()<b2.getBook_id()?-1:
        	(b1.getBook_id()>b2.getBook_id())?1:0));
        
          System.out.println("after sorting : "+li);
	}
}

# so from above example we got that direct we can write our sort inside the 
sorting method in lambda or first define the lambda exprfession and then
provide the reference in sort method













